type: edu
files:
  - name: test/CarSharingTest.java
    visible: false
    text: |
      import org.hyperskill.hstest.dynamic.DynamicTest;
      import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
      import org.hyperskill.hstest.stage.StageTest;
      import org.hyperskill.hstest.testcase.CheckResult;
      import org.hyperskill.hstest.testing.TestedProgram;
      import org.junit.BeforeClass;
      
      import java.io.File;
      
      public class CarSharingTest extends StageTest<Void> {
      
          private static final String databaseFileName = "src/carsharing/db/carsharing.mv.db";
          private static DatabaseUtil db = new DatabaseUtil();
      
          @BeforeClass
          public static void deleteDatabaseFile() {
              File file = new File(databaseFileName);
      
              if (!file.exists()) {
                  return;
              }
      
              if (!file.delete()) {
                  throw new WrongAnswer("Can't delete database file before starting your program.\n" +
                      "Make sure you close all the connections with the database file!");
              }
          }
      
      
          @DynamicTest(order = -1)
          public CheckResult test2_ifDatabaseExist() {
      
              TestedProgram program = new TestedProgram();
              program.start("-databaseFileName", "carsharing");
              program.execute("0");
      
              if (!program.isFinished()) {
                  return CheckResult.wrong("After choosing 'Exit' item your program should stop.");
              }
      
              File file = new File(databaseFileName);
      
              if (!file.exists()) {
                  return CheckResult.wrong("Can't find a database file. It should be named 'carsharing.mv.db'" +
                      " and located in /carsharing/db/ folder.\n" +
                      "The file should be created right after starting the program!");
              }
      
              return correct();
          }
      
          @DynamicTest
          public CheckResult test1_testMenu() {
              TestedProgram program = new TestedProgram();
              String output = program.start("-databaseFileName", "carsharing");
      
              if (!output.contains("1. Log in as a manager")) {
                  return CheckResult.wrong("Start menu should contain \"1. Log in as a manager\"");
              }
      
              if (!output.contains("0. Exit")) {
                  return CheckResult.wrong("Start menu should contain \"0. Exit\"");
              }
      
              output = program.execute("1");
      
              if (!output.contains("1. Company list")) {
                  return CheckResult.wrong("After choosing 'Log in as a manager' item you should print menu that contains '1. Company list' item");
              }
      
              if (!output.contains("2. Create a company")) {
                  return CheckResult.wrong("After choosing 'Log in as a manager' item you should print menu that contains '2. Create a company' item");
              }
      
              if (!output.contains("0. Back")) {
                  return CheckResult.wrong("After choosing 'Log in as a manager' item you should print menu that contains '0. Back' item");
              }
      
              output = program.execute("0");
      
              if (!output.contains("1. Log in as a manager")) {
                  return CheckResult.wrong("After choosing '0. Back' item you should print previous menu and it should contain \"1. Log in as a manager\"");
              }
      
              if (!output.contains("0. Exit")) {
                  return CheckResult.wrong("After choosing '0. Back' item you should print previous menu and it should contain \"0. Exit\"");
              }
      
              return CheckResult.correct();
          }
      
          @DynamicTest
          public CheckResult test3_checkDatabaseConnection() {
              db.getConnection();
              return correct();
          }
      
          @DynamicTest
          public CheckResult test4_checkIfTableExists() {
              if (!db.ifTableExist("COMPANY")) {
                  return wrong("Can't find table named 'company'");
              }
              return correct();
          }
      
          @DynamicTest
          public CheckResult test5_checkTableColumns() {
              String[][] columns = {{"ID", "INT"}, {"NAME", "VARCHAR"}};
              db.ifColumnsExist("COMPANY", columns);
              db.checkCompanyColumnProperties();
              return correct();
          }
      
          @DynamicTest
          public CheckResult test6_testInsert() {
      
              TestedProgram program = new TestedProgram();
              program.start("-databaseFileName", "carsharing");
      
              db.clearCompanyTable();
      
              program.execute("1");
              String output = program.execute("1");
      
              if (!output.contains("The company list is empty")) {
                  return CheckResult.wrong("If no company has been created you should print 'The company list is empty' when '1. Company list' item is chosen");
              }
      
              output = program.execute("2");
      
              if (!output.contains("Enter the company name")) {
                  return CheckResult.wrong("After choosing '2. Create a company' item you should ask to enter a company name.\n" +
                      "Your output should contain 'Enter the company name:'");
              }
      
              program.execute("Super company");
              output = program.execute("1");
      
              if (!output.contains("1. Super company")) {
                  return CheckResult.wrong("In the company list expected one company.\n" +
                      "Your output should contain '1. Super company'");
              }
      
              db.checkCompany("Super company");
      
              program.execute("2\nAnother company");
              program.execute("2\nOne more company");
      
              db.checkCompany("Another company");
              db.checkCompany("One more company");
      
              output = program.execute("1");
      
              if (!output.contains("1. Super company")) {
                  return CheckResult.wrong("In the company list expected one company.\n" +
                      "Your output should contain '1. Super company'.\n" +
                      "Companies should be sorted by 'ID' column");
              }
      
              if (!output.contains("2. Another company")) {
                  return CheckResult.wrong("In the company list expected one company.\n" +
                      "Your output should contain '2. Another company'.\n" +
                      "Companies should be sorted by 'ID' column");
              }
      
              if (!output.contains("3. One more company")) {
                  return CheckResult.wrong("In the company list expected one company.\n" +
                      "Your output should contain '2. Another company'.\n" +
                      "Companies should be sorted by 'ID' column");
              }
      
              program.execute("0");
              program.execute("0");
      
              return CheckResult.correct();
          }
      
          private CheckResult wrong(String message) {
              db.closeConnection();
              return CheckResult.wrong(message);
          }
      
          private CheckResult correct() {
              db.closeConnection();
              return CheckResult.correct();
          }
      }
    learner_created: false
  - name: test/DatabaseUtil.java
    visible: false
    text: |
      import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
      
      import java.sql.*;
      import java.util.HashMap;
      
      public class DatabaseUtil {
      
          private Connection connection = null;
          private static final String databaseFilePath = "./src/carsharing/db/carsharing";
      
          public Connection getConnection() {
              if (connection != null) {
                  return connection;
              }
              try {
                  connection = DriverManager.getConnection("jdbc:h2:" + databaseFilePath);
              } catch (SQLException ignored) {
                  throw new WrongAnswer("Can't connect to the database.");
              }
              return connection;
          }
      
          public void closeConnection() {
              if (connection != null) {
                  try {
                      connection.close();
                  } catch (SQLException ignored) {
                      throw new WrongAnswer("Can't close connection to the database.");
                  }
                  connection = null;
              }
          }
      
          public ResultSet executeQuery(String query) {
              try {
                  return getConnection().createStatement().executeQuery(query);
              } catch (SQLException exception) {
                  throw new WrongAnswer("Can't execute query to the database.\n" +
                          "SQL Message:\n" + exception.getMessage());
              }
          }
      
          public boolean ifTableExist(String tableName) {
              try {
                  tableName = tableName.toUpperCase();
                  ResultSet resultSet = executeQuery("SHOW TABLES");
                  while (resultSet.next()) {
                      if (resultSet.getString("TABLE_NAME").equals(tableName)) {
                          return true;
                      }
                  }
                  return false;
              } catch (SQLException exception) {
                  throw new WrongAnswer("Can't execute query to the database.\n" +
                          "SQL Message:\n" + exception.getMessage());
              }
          }
      
          public void ifColumnsExist(String tableName, String[][] columns) {
              try {
                  ResultSet resultSet = getConnection()
                          .createStatement()
                          .executeQuery("SHOW COLUMNS FROM " + tableName.toUpperCase());
      
                  HashMap<String, String> correctColumns = new HashMap<>();
                  for (String[] column : columns) {
                      correctColumns.put(column[0], column[1]);
                  }
      
                  while (resultSet.next()) {
                      String columnName = resultSet.getString("FIELD");
                      if (correctColumns.containsKey(columnName)) {
                          if (!resultSet.getString("TYPE").contains(correctColumns.get(columnName))) {
                              throw new WrongAnswer("In the '" + tableName.toUpperCase() + "' table '" + columnName
                                      + "' column should be of " + correctColumns.get(columnName) + " type.");
                          }
                          correctColumns.remove(columnName);
                      }
                  }
                  if (!correctColumns.isEmpty()) {
                      throw new WrongAnswer("Can't find in '" + tableName.toUpperCase() + "' table the following columns: " + correctColumns.toString());
                  }
              } catch (SQLException exception) {
                  throw new WrongAnswer("Can't execute query to the database.\n" +
                          "SQL Message:\n" + exception.getMessage());
              }
          }
      
          public void clearCompanyTable() {
              try {
                  getConnection().createStatement().execute("DELETE FROM COMPANY");
              } catch (SQLException ignored) {
                  throw new WrongAnswer("Can't delete rows from the COMPANY table.");
              }
          }
      
          public void checkCompany(String name) {
              try {
                  PreparedStatement preparedStatement = getConnection().prepareStatement("SELECT * FROM COMPANY WHERE NAME = ?");
                  preparedStatement.setString(1, name);
                  ResultSet resultSet = preparedStatement.executeQuery();
                  if (!resultSet.next()) {
                      throw new WrongAnswer("Can't find '" + name + "' company in the COMPANY table.");
                  }
              } catch (SQLException exception) {
                  throw new WrongAnswer("Can't execute query to the database.\n" +
                          "SQL Message:\n" + exception.getMessage());
              }
          }
      
          public void checkCompanyColumnProperties() {
              try {
      
                  ResultSet resultSet = getConnection().createStatement().executeQuery("SELECT * FROM INFORMATION_SCHEMA.CONSTRAINTS" +
                          " WHERE COLUMN_LIST = 'ID' AND TABLE_NAME = 'COMPANY' AND CONSTRAINT_TYPE = 'PRIMARY KEY'");
      
                  if (!resultSet.next()) {
                      throw new WrongAnswer("Looks like 'ID' column in 'COMPANY' table doesn't have PRIMARY KEY constraint.");
                  }
      
                  resultSet = getConnection().createStatement().executeQuery("SELECT * FROM INFORMATION_SCHEMA.CONSTRAINTS" +
                          " WHERE COLUMN_LIST = 'NAME' AND TABLE_NAME = 'COMPANY' AND CONSTRAINT_TYPE = 'UNIQUE'");
      
                  if (!resultSet.next()) {
                      throw new WrongAnswer("Looks like 'NAME' column in 'COMPANY' table doesn't have UNIQUE constraint.");
                  }
      
                  resultSet = getConnection().createStatement().executeQuery("SELECT  * FROM INFORMATION_SCHEMA.COLUMNS" +
                          " WHERE COLUMN_NAME = 'NAME' AND TABLE_NAME = 'COMPANY' AND IS_NULLABLE = 'NO'");
      
                  if (!resultSet.next()) {
                      throw new WrongAnswer("Looks like 'NAME' column in 'COMPANY' table doesn't have NOT NULL constraint.");
                  }
      
              } catch (SQLException exception) {
                  throw new WrongAnswer("Can't execute query to the database.\n" +
                          "SQL Message:\n" + exception.getMessage());
              }
          }
      }
    learner_created: false
  - name: src/carsharing/Main.java
    visible: true
    text: |-
      package carsharing;
      
      public class Main {
      
          public static void main(String[] args) {
              // write your code here
          }
      }
    learner_created: false
  - name: src/carsharing/db/carsharing.trace.db
    visible: true
    text: "2023-10-08 21:43:57 jdbc[3]: exception\norg.h2.jdbc.JdbcSQLSyntaxErrorException:\
    \ Table \"COMPANY\" already exists; SQL statement:\nCREATE TABLE COMPANY (ID INTEGER\
    \ not NULL,  NAME VARCHAR(255),  PRIMARY KEY ( id )) [42101-200]\n2023-10-08 21:43:57\
    \ database: wrong user or password; user: \"\"\norg.h2.message.DbException: Wrong\
    \ user name or password [28000-200]\n\tat org.h2.message.DbException.get(DbException.java:205)\n\
    \tat org.h2.message.DbException.get(DbException.java:181)\n\tat org.h2.message.DbException.get(DbException.java:170)\n\
    \tat org.h2.engine.Engine.openSession(Engine.java:131)\n\tat org.h2.engine.Engine.openSession(Engine.java:192)\n\
    \tat org.h2.engine.Engine.createSessionAndValidate(Engine.java:171)\n\tat org.h2.engine.Engine.createSession(Engine.java:166)\n\
    \tat org.h2.engine.Engine.createSession(Engine.java:29)\n\tat org.h2.engine.SessionRemote.connectEmbeddedOrServer(SessionRemote.java:340)\n\
    \tat org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:173)\n\tat org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:152)\n\
    \tat org.h2.Driver.connect(Driver.java:69)\n\tat java.sql/java.sql.DriverManager.getConnection(DriverManager.java:681)\n\
    \tat java.sql/java.sql.DriverManager.getConnection(DriverManager.java:252)\n\t\
    at DatabaseUtil.getConnection(DatabaseUtil.java:19)\n\tat CarSharingTest.test2_checkDatabaseConnection(CarSharingTest.java:74)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat org.hyperskill.hstest.common.ReflectionUtils.invokeMethod(ReflectionUtils.java:92)\n\
    \tat org.hyperskill.hstest.dynamic.input.DynamicTesting.lambda$searchDynamicTests$2(DynamicTesting.java:284)\n\
    \tat org.hyperskill.hstest.dynamic.input.DynamicTesting$1DynamicTestElement.lambda$getTests$0(DynamicTesting.java:252)\n\
    \tat org.hyperskill.hstest.testing.runner.AsyncDynamicTestingRunner.lambda$runMain$0(AsyncDynamicTestingRunner.java:45)\n\
    \tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat\
    \ java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)\n\
    \tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)\n\
    \tat java.base/java.lang.Thread.run(Thread.java:833)\nCaused by: org.h2.jdbc.JdbcSQLInvalidAuthorizationSpecException:\
    \ Wrong user name or password [28000-200]\n\tat org.h2.message.DbException.getJdbcSQLException(DbException.java:461)\n\
    \tat org.h2.message.DbException.getJdbcSQLException(DbException.java:429)\n\t\
    ... 28 more\n2023-10-08 22:37:27 jdbc[3]: exception\norg.h2.jdbc.JdbcSQLSyntaxErrorException:\
    \ Table \"COMPANY\" already exists; SQL statement:\nCREATE TABLE COMPANY (ID INTEGER\
    \ not NULL,  NAME VARCHAR(255),  PRIMARY KEY ( ID )) [42101-200]\n2023-10-08 22:37:27\
    \ database: wrong user or password; user: \"\"\norg.h2.message.DbException: Wrong\
    \ user name or password [28000-200]\n\tat org.h2.message.DbException.get(DbException.java:205)\n\
    \tat org.h2.message.DbException.get(DbException.java:181)\n\tat org.h2.message.DbException.get(DbException.java:170)\n\
    \tat org.h2.engine.Engine.openSession(Engine.java:131)\n\tat org.h2.engine.Engine.openSession(Engine.java:192)\n\
    \tat org.h2.engine.Engine.createSessionAndValidate(Engine.java:171)\n\tat org.h2.engine.Engine.createSession(Engine.java:166)\n\
    \tat org.h2.engine.Engine.createSession(Engine.java:29)\n\tat org.h2.engine.SessionRemote.connectEmbeddedOrServer(SessionRemote.java:340)\n\
    \tat org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:173)\n\tat org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:152)\n\
    \tat org.h2.Driver.connect(Driver.java:69)\n\tat java.sql/java.sql.DriverManager.getConnection(DriverManager.java:681)\n\
    \tat java.sql/java.sql.DriverManager.getConnection(DriverManager.java:252)\n\t\
    at DatabaseUtil.getConnection(DatabaseUtil.java:19)\n\tat CarSharingTest.test2_checkDatabaseConnection(CarSharingTest.java:74)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat org.hyperskill.hstest.common.ReflectionUtils.invokeMethod(ReflectionUtils.java:92)\n\
    \tat org.hyperskill.hstest.dynamic.input.DynamicTesting.lambda$searchDynamicTests$2(DynamicTesting.java:284)\n\
    \tat org.hyperskill.hstest.dynamic.input.DynamicTesting$1DynamicTestElement.lambda$getTests$0(DynamicTesting.java:252)\n\
    \tat org.hyperskill.hstest.testing.runner.AsyncDynamicTestingRunner.lambda$runMain$0(AsyncDynamicTestingRunner.java:45)\n\
    \tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat\
    \ java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)\n\
    \tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)\n\
    \tat java.base/java.lang.Thread.run(Thread.java:833)\nCaused by: org.h2.jdbc.JdbcSQLInvalidAuthorizationSpecException:\
    \ Wrong user name or password [28000-200]\n\tat org.h2.message.DbException.getJdbcSQLException(DbException.java:461)\n\
    \tat org.h2.message.DbException.getJdbcSQLException(DbException.java:429)\n\t\
    ... 28 more\n2023-10-08 22:38:44 jdbc[3]: exception\norg.h2.jdbc.JdbcSQLSyntaxErrorException:\
    \ Table \"COMPANY\" already exists; SQL statement:\nCREATE TABLE COMPANY (ID INTEGER\
    \ not NULL,  NAME VARCHAR(255),  PRIMARY KEY ( ID )) [42101-200]\n2023-10-08 22:38:44\
    \ database: wrong user or password; user: \"\"\norg.h2.message.DbException: Wrong\
    \ user name or password [28000-200]\n\tat org.h2.message.DbException.get(DbException.java:205)\n\
    \tat org.h2.message.DbException.get(DbException.java:181)\n\tat org.h2.message.DbException.get(DbException.java:170)\n\
    \tat org.h2.engine.Engine.openSession(Engine.java:131)\n\tat org.h2.engine.Engine.openSession(Engine.java:192)\n\
    \tat org.h2.engine.Engine.createSessionAndValidate(Engine.java:171)\n\tat org.h2.engine.Engine.createSession(Engine.java:166)\n\
    \tat org.h2.engine.Engine.createSession(Engine.java:29)\n\tat org.h2.engine.SessionRemote.connectEmbeddedOrServer(SessionRemote.java:340)\n\
    \tat org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:173)\n\tat org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:152)\n\
    \tat org.h2.Driver.connect(Driver.java:69)\n\tat java.sql/java.sql.DriverManager.getConnection(DriverManager.java:681)\n\
    \tat java.sql/java.sql.DriverManager.getConnection(DriverManager.java:252)\n\t\
    at DatabaseUtil.getConnection(DatabaseUtil.java:19)\n\tat CarSharingTest.test2_checkDatabaseConnection(CarSharingTest.java:74)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat org.hyperskill.hstest.common.ReflectionUtils.invokeMethod(ReflectionUtils.java:92)\n\
    \tat org.hyperskill.hstest.dynamic.input.DynamicTesting.lambda$searchDynamicTests$2(DynamicTesting.java:284)\n\
    \tat org.hyperskill.hstest.dynamic.input.DynamicTesting$1DynamicTestElement.lambda$getTests$0(DynamicTesting.java:252)\n\
    \tat org.hyperskill.hstest.testing.runner.AsyncDynamicTestingRunner.lambda$runMain$0(AsyncDynamicTestingRunner.java:45)\n\
    \tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat\
    \ java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)\n\
    \tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)\n\
    \tat java.base/java.lang.Thread.run(Thread.java:833)\nCaused by: org.h2.jdbc.JdbcSQLInvalidAuthorizationSpecException:\
    \ Wrong user name or password [28000-200]\n\tat org.h2.message.DbException.getJdbcSQLException(DbException.java:461)\n\
    \tat org.h2.message.DbException.getJdbcSQLException(DbException.java:429)\n\t\
    ... 28 more\n2023-10-08 22:55:10 jdbc[3]: exception\norg.h2.jdbc.JdbcSQLSyntaxErrorException:\
    \ Syntax error in SQL statement \"CREATE TABLE COMPANY (ID INTEGER NOT NULL, \
    \ NAME VARCHAR(255)[*]\"; expected \"FOR, UNSIGNED, INVISIBLE, VISIBLE, NOT, NULL,\
    \ AS, DEFAULT, GENERATED, ON, NOT, NULL, AUTO_INCREMENT, BIGSERIAL, SERIAL, IDENTITY,\
    \ NULL_TO_DEFAULT, SEQUENCE, SELECTIVITY, COMMENT, CONSTRAINT, PRIMARY, UNIQUE,\
    \ NOT, NULL, COMMENT, CHECK, REFERENCES, ,, )\"; SQL statement:\nCREATE TABLE\
    \ COMPANY (ID INTEGER not NULL,  NAME VARCHAR(255) [42001-200]\n2023-10-08 22:55:10\
    \ jdbc[3]: exception\norg.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in\
    \ SQL statement \"CREATE TABLE COMPANY (ID INTEGER NOT NULL,  NAME VARCHAR(255)[*]\"\
    ; expected \"FOR, UNSIGNED, INVISIBLE, VISIBLE, NOT, NULL, AS, DEFAULT, GENERATED,\
    \ ON, NOT, NULL, AUTO_INCREMENT, BIGSERIAL, SERIAL, IDENTITY, NULL_TO_DEFAULT,\
    \ SEQUENCE, SELECTIVITY, COMMENT, CONSTRAINT, PRIMARY, UNIQUE, NOT, NULL, COMMENT,\
    \ CHECK, REFERENCES, ,, )\"; SQL statement:\nCREATE TABLE COMPANY (ID INTEGER\
    \ not NULL,  NAME VARCHAR(255) [42001-200]\n2023-10-08 22:55:11 database: wrong\
    \ user or password; user: \"\"\norg.h2.message.DbException: Wrong user name or\
    \ password [28000-200]\n\tat org.h2.message.DbException.get(DbException.java:205)\n\
    \tat org.h2.message.DbException.get(DbException.java:181)\n\tat org.h2.message.DbException.get(DbException.java:170)\n\
    \tat org.h2.engine.Engine.openSession(Engine.java:131)\n\tat org.h2.engine.Engine.openSession(Engine.java:192)\n\
    \tat org.h2.engine.Engine.createSessionAndValidate(Engine.java:171)\n\tat org.h2.engine.Engine.createSession(Engine.java:166)\n\
    \tat org.h2.engine.Engine.createSession(Engine.java:29)\n\tat org.h2.engine.SessionRemote.connectEmbeddedOrServer(SessionRemote.java:340)\n\
    \tat org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:173)\n\tat org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:152)\n\
    \tat org.h2.Driver.connect(Driver.java:69)\n\tat java.sql/java.sql.DriverManager.getConnection(DriverManager.java:681)\n\
    \tat java.sql/java.sql.DriverManager.getConnection(DriverManager.java:252)\n\t\
    at DatabaseUtil.getConnection(DatabaseUtil.java:19)\n\tat CarSharingTest.test2_checkDatabaseConnection(CarSharingTest.java:74)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat org.hyperskill.hstest.common.ReflectionUtils.invokeMethod(ReflectionUtils.java:92)\n\
    \tat org.hyperskill.hstest.dynamic.input.DynamicTesting.lambda$searchDynamicTests$2(DynamicTesting.java:284)\n\
    \tat org.hyperskill.hstest.dynamic.input.DynamicTesting$1DynamicTestElement.lambda$getTests$0(DynamicTesting.java:252)\n\
    \tat org.hyperskill.hstest.testing.runner.AsyncDynamicTestingRunner.lambda$runMain$0(AsyncDynamicTestingRunner.java:45)\n\
    \tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat\
    \ java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)\n\
    \tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)\n\
    \tat java.base/java.lang.Thread.run(Thread.java:833)\nCaused by: org.h2.jdbc.JdbcSQLInvalidAuthorizationSpecException:\
    \ Wrong user name or password [28000-200]\n\tat org.h2.message.DbException.getJdbcSQLException(DbException.java:461)\n\
    \tat org.h2.message.DbException.getJdbcSQLException(DbException.java:429)\n\t\
    ... 28 more\n2023-10-08 23:13:01 jdbc[3]: exception\norg.h2.jdbc.JdbcSQLSyntaxErrorException:\
    \ Table \"COMPANY\" already exists; SQL statement:\nCREATE TABLE COMPANY (ID INTEGER\
    \ not NULL,  NAME VARCHAR(255)) [42101-200]\n"
    learner_created: true
  - name: src/carsharing/db/carsharing.mv.db
    visible: true
    text: 
    learner_created: true
feedback_link: https://hyperskill.org/learn/step/11502#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Tue, 10 Oct 2023 11:54:23 UTC"
record: 2
